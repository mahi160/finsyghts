/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as appSettingsIndexRouteImport } from './routes/(app)/settings/index'
import { Route as appDashboardIndexRouteImport } from './routes/(app)/dashboard/index'
import { Route as appCategoriesIndexRouteImport } from './routes/(app)/categories/index'
import { Route as appAccountsIndexRouteImport } from './routes/(app)/accounts/index'

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const appSettingsIndexRoute = appSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => appRouteRoute,
} as any)
const appDashboardIndexRoute = appDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => appRouteRoute,
} as any)
const appCategoriesIndexRoute = appCategoriesIndexRouteImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => appRouteRoute,
} as any)
const appAccountsIndexRoute = appAccountsIndexRouteImport.update({
  id: '/accounts/',
  path: '/accounts/',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/accounts': typeof appAccountsIndexRoute
  '/categories': typeof appCategoriesIndexRoute
  '/dashboard': typeof appDashboardIndexRoute
  '/settings': typeof appSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof appIndexRoute
  '/accounts': typeof appAccountsIndexRoute
  '/categories': typeof appCategoriesIndexRoute
  '/dashboard': typeof appDashboardIndexRoute
  '/settings': typeof appSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(app)/': typeof appIndexRoute
  '/(app)/accounts/': typeof appAccountsIndexRoute
  '/(app)/categories/': typeof appCategoriesIndexRoute
  '/(app)/dashboard/': typeof appDashboardIndexRoute
  '/(app)/settings/': typeof appSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/accounts' | '/categories' | '/dashboard' | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/accounts' | '/categories' | '/dashboard' | '/settings'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/'
    | '/(app)/accounts/'
    | '/(app)/categories/'
    | '/(app)/dashboard/'
    | '/(app)/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/settings/': {
      id: '/(app)/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof appSettingsIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/dashboard/': {
      id: '/(app)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof appDashboardIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/categories/': {
      id: '/(app)/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof appCategoriesIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/accounts/': {
      id: '/(app)/accounts/'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof appAccountsIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appIndexRoute: typeof appIndexRoute
  appAccountsIndexRoute: typeof appAccountsIndexRoute
  appCategoriesIndexRoute: typeof appCategoriesIndexRoute
  appDashboardIndexRoute: typeof appDashboardIndexRoute
  appSettingsIndexRoute: typeof appSettingsIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appIndexRoute: appIndexRoute,
  appAccountsIndexRoute: appAccountsIndexRoute,
  appCategoriesIndexRoute: appCategoriesIndexRoute,
  appDashboardIndexRoute: appDashboardIndexRoute,
  appSettingsIndexRoute: appSettingsIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
